// -----------------------------------------------------------------------------
// FILE: .github/workflows/ci.yml
// -----------------------------------------------------------------------------
name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: listings
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d listings"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/listings?sslmode=disable
      REDIS_URL: redis://localhost:6379
      PORT: 8080

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Run DB migrations
        run: psql ${{ env.DATABASE_URL }} -f migrations/001_init.sql

      - name: Build
        run: make build

      - name: Test
        run: go test ./... -v

// -----------------------------------------------------------------------------
// FILE: README.md (update)
// -----------------------------------------------------------------------------
# Listing Service (Boilerplate)

Simple Go + Gin microservice for marketplace listings.

## Quick start (with Docker Compose)

1. Copy `.env.example` to `.env` and edit if needed.
2. `docker-compose up --build`
3. Service available at `http://localhost:8080` and DB at `localhost:5432`.

## Routes
- `GET /health` - health check
- `GET /api/listings` - list
- `GET /api/listings/:id` - detail
- `POST /api/listings` - create listing
- `POST /api/listings/:id/bids` - create bid
- `POST /api/listings/:id/media` - add media

## Migrations
- Run `make migrate` (inside Docker Compose)
- Or `./scripts/migrate.sh` if `psql` installed locally

## CI/CD
- GitHub Actions workflow included: `.github/workflows/ci.yml`
- Runs migrations, builds service, and executes tests on every push/PR to `main`
- PostgreSQL and Redis are started automatically as services during CI
